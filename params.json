{"name":"Csharp-savehandler","tagline":"XML File Serialization. Save, Load, Remove, and Create XML files over serialization.","body":"# csharp-SaveHandler\r\n\r\n<h3>Overview</h3>\r\nXml File Serialization. Save, Load, Remove, and Create XML files over serialization.\r\n\r\n# <h3>Generic File</h3>\r\nThe SaveHandler contains a basic default Xml file template. This class can be inherited for generic use.\r\n```\r\n[Serializable]\r\npublic class XmlFile\r\n{\r\n    [XmlAttribute]\r\n    public string Title = string.Empty;\r\n\r\n    public XmlFile() { }\r\n\r\n    public XmlFile(string title)\r\n    {\r\n        Title = title;\r\n    }\r\n\r\n    ~XmlFile() { }\r\n}\r\n```  \r\n\r\n# <h3>Custom File</h3>\r\nThe SaveHandler supports both inherited and custom files for use. Sample outputs can be found here: <a href=\"/SaveHandler/bin\">Sample Files</a>\r\n\r\n```\r\n\r\n// Custom Inheriated Class.\r\n[Serializable]\r\npublic class CustomXmlFile : XmlFile\r\n{\r\n    public CustomXmlFile()\r\n    {\r\n        Title = \"CustomXmlFile\";\r\n        Element1 = 0;\r\n        Element2 = \"value\";\r\n    }\r\n\r\n    [XmlElement]\r\n    public short Element1;\r\n\r\n    [XmlElement(\"Element2\")]\r\n    public string Element2;\r\n}\r\n\r\n// Custom Xml File.\r\n[Serializable]\r\npublic class SampleFile\r\n{\r\n  public SampleFile()\r\n  {\r\n      listItems = new List<string>();\r\n      listItemsArray = listItems;\r\n  }\r\n\r\n  ~SampleFile()\r\n  {\r\n      if (listItems != null)\r\n          listItems = null;\r\n\r\n      if (listItemsArray != null)\r\n          listItemsArray = null;\r\n  }\r\n\r\n  [XmlElement]\r\n  public List<string> listItems = null;\r\n\r\n  [XmlArray]\r\n  public List<string> listItemsArray = null;\r\n}\r\n```\r\n\r\n# <h3>Methods</h3>\r\n\r\n<h5>GetFile<T>(string location)</h5>\r\nAttempts to retrieve a loaded file from a hashtable. If the file does not exist, an attempt will be made to load it. If the file doesn't exist and/or the path is incorrect, it will return NULL.\r\n```\r\n// Attempt to get a loaded file\r\nstring location = @\"..\\MyXmlFile.xml\";\r\nXmlFile file = saveHandler.GetFile<XmlFile>(location);\r\n```\r\n\r\n<h5>RemoveLoadedFile(string location)</h5>\r\nAttempts to remove a loaded file from the hashtable.\r\n````\r\n// Remove the loaded file\r\nstring location = @\"..\\MyXmlFile.xml\";\r\nsaveHandler.RemoveLoadedFile(location);\r\n````\r\n\r\n<h5>DeleteFile(string location)</h5>\r\nAttempts to remove a loaded file from the hashtable, and deletes the file from the computer.\r\n````\r\n// Delete the loaded file\r\nstring location = @\"..\\MyXmlFile.xml\";\r\nsaveHandler.DeleteFile(location);\r\n````\r\n\r\n<h5>CreateFile<T>(string location, T file, bool overwrite)</h5>\r\nAttempts to create a new file, and loads it to a hashtable. If the file exists, an overwrite is required to replace the currently exiting file. \r\n```\r\n// Create a new XmlFile. Will\r\n// overwrite if file already exists.\r\nstring location = @\"..\\MyXmlFile.xml\";\r\nsaveHandler.CreateFile<XmlFile>(location, new XmlFile(), true);\r\n```\r\n\r\n<h5>SaveFile<T>(string location)</h5>\r\nAttempts to save the file. False will be returned if the file doesn't exist and/or a save attempt failed.\r\n```\r\n// Save the file.\r\nstring location = @\"..\\MyXmlFile.xml\";\r\nsaveHandler.SaveFile<XmlFile>(location);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}